var searchIndex = {};
searchIndex['mrusty'] = {"items":[[0,"","mrusty","# mrusty. mruby safe bindings for Rust",null,null],[3,"MRuby","","A safe `struct` for the mruby API. The `struct` only contains creation and desctruction\nmethods. Creating an `MRuby` returns a `MRubyType` (`Rc<RefCell<MRuby>>`) which implements\n`MRubyImpl` where the rest of the implemented API is found.",null,null],[12,"mrb","","",0,null],[3,"Value","","A `struct` that wraps around any mruby variable.",null,null],[4,"MRubyError","","An `enum` containing all possbile types of errors.",null,null],[13,"Cast","","",1,null],[13,"Runtime","","",1,null],[13,"Filetype","","",1,null],[13,"Io","","",1,null],[11,"new","","Creates an mruby state and context stored in a `MRubyType` (`Rc<RefCell<MRuby>>`).",0,{"inputs":[{"name":"mruby"}],"output":{"name":"mrubytype"}}],[11,"fmt","","",1,{"inputs":[{"name":"mrubyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"mrubyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"mrubyerror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"mrubyerror"},{"name":"error"}],"output":{"name":"mrubyerror"}}],[11,"drop","","",0,{"inputs":[{"name":"mruby"}],"output":null}],[11,"init","","Initializes the `self` mruby object passed to `initialize` with a Rust object of type `T`.",2,{"inputs":[{"name":"value"},{"name":"t"}],"output":{"name":"value"}}],[11,"call","","Calls method `name` on a `Value` passing `args`.",2,{"inputs":[{"name":"value"},{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[11,"call_unchecked","","Calls method `name` on a `Value` passing `args`. If call fails, mruby will be left to\nhandle the exception.",2,{"inputs":[{"name":"value"},{"name":"str"},{"name":"vec"}],"output":{"name":"value"}}],[11,"to_bool","","Casts a `Value` and returns a `bool` in an `Ok` or an `Err` if the types mismatch.",2,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"to_i32","","Casts a `Value` and returns an `i32` in an `Ok` or an `Err` if the types mismatch.",2,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"to_f64","","Casts a `Value` and returns an `f64` in an `Ok` or an `Err` if the types mismatch.",2,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"to_str","","Casts a `Value` and returns a `&str` in an `Ok` or an `Err` if the types mismatch.",2,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"to_obj","","Casts mruby `Value` of `Class` `name` to Rust type `Rc<T>`.",2,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"to_option","","Casts mruby `Value` of `Class` `name` to Rust `Option` of `Rc<T>`.",2,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"to_vec","","Casts mruby `Value` of `Class` `Array` to Rust type `Vec<Value>`.",2,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"eq","","",2,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"MRubyType","","A `type` wrapper around a `Rc<RefCell<MRuby>>`. Created with `MRuby::new()`.",null,null],[8,"MRubyFile","","A `trait` useful for organising Rust types into dynamic mruby files.",null,null],[10,"require","","",3,{"inputs":[{"name":"mrubyfile"},{"name":"mrubytype"}],"output":null}],[8,"MRubyImpl","","A `trait` used on `MRubyType` which implements mruby functionality.",null,null],[10,"filename","","Adds a filename to the mruby context.",4,{"inputs":[{"name":"mrubyimpl"},{"name":"str"}],"output":null}],[10,"run","","Runs mruby `script` on a state and context and returns a `Value` in an `Ok`\nor an `Err` containing an mruby `Exception`'s message.",4,{"inputs":[{"name":"mrubyimpl"},{"name":"str"}],"output":{"name":"result"}}],[10,"runb","","Runs mruby compiled (.mrb) `script` on a state and context and returns a `Value` in an `Ok`\nor an `Err` containing an mruby `Exception`'s message.",4,null],[10,"execute","","Runs mruby (compiled (.mrb) or not (.rb)) `script` on a state and context and returns a\n`Value` in an `Ok` or an `Err` containing an mruby `Exception`'s message.",4,{"inputs":[{"name":"mrubyimpl"},{"name":"path"}],"output":{"name":"result"}}],[10,"raise","","Raises an mruby `RuntimeError` with `message` message.",4,{"inputs":[{"name":"mrubyimpl"},{"name":"str"}],"output":null}],[10,"def_file","","Defines a dynamic file that can be `require`d containing the Rust type `T` and runs its\n`MRubyFile`-inherited `require` method.",4,{"inputs":[{"name":"mrubyimpl"},{"name":"str"}],"output":null}],[10,"def_class","","Defines Rust type `T` as an mruby `Class` named `name`.",4,{"inputs":[{"name":"mrubyimpl"},{"name":"str"}],"output":null}],[10,"def_method","","Defines an mruby method named `name`. The closure to be run when the `name` method is\ncalled should be passed through the `mrfn!` macro.",4,{"inputs":[{"name":"mrubyimpl"},{"name":"str"},{"name":"f"}],"output":null}],[10,"def_class_method","","Defines an mruby class method named `name`. The closure to be run when the `name` method is\ncalled should be passed through the `mrfn!` macro.",4,{"inputs":[{"name":"mrubyimpl"},{"name":"str"},{"name":"f"}],"output":null}],[10,"nil","","Creates mruby `Value` `nil`.",4,{"inputs":[{"name":"mrubyimpl"}],"output":{"name":"value"}}],[10,"bool","","Creates mruby `Value` containing `true` or `false`.",4,{"inputs":[{"name":"mrubyimpl"},{"name":"bool"}],"output":{"name":"value"}}],[10,"fixnum","","Creates mruby `Value` of `Class` `Fixnum`.",4,{"inputs":[{"name":"mrubyimpl"},{"name":"i32"}],"output":{"name":"value"}}],[10,"float","","Creates mruby `Value` of `Class` `Float`.",4,{"inputs":[{"name":"mrubyimpl"},{"name":"f64"}],"output":{"name":"value"}}],[10,"string","","Creates mruby `Value` of `Class` `String`.",4,{"inputs":[{"name":"mrubyimpl"},{"name":"str"}],"output":{"name":"value"}}],[10,"obj","","Creates mruby `Value` of `Class` `name` containing a Rust object of type `T`.",4,{"inputs":[{"name":"mrubyimpl"},{"name":"t"}],"output":{"name":"value"}}],[10,"option","","Creates mruby `Value` of `Class` `name` containing a Rust `Option` of type `T`.",4,{"inputs":[{"name":"mrubyimpl"},{"name":"option"}],"output":{"name":"value"}}],[10,"array","","Creates mruby `Value` of `Class` `Array`.",4,{"inputs":[{"name":"mrubyimpl"},{"name":"vec"}],"output":{"name":"value"}}],[14,"mrfn!","","A `macro` useful for defining Rust closures for mruby. Requires `use mrusty::*;`.",null,null],[11,"filename","","",5,{"inputs":[{"name":"mrubytype"},{"name":"str"}],"output":null}],[11,"run","","",5,{"inputs":[{"name":"mrubytype"},{"name":"str"}],"output":{"name":"result"}}],[11,"runb","","",5,null],[11,"execute","","",5,{"inputs":[{"name":"mrubytype"},{"name":"path"}],"output":{"name":"result"}}],[11,"raise","","",5,{"inputs":[{"name":"mrubytype"},{"name":"str"}],"output":null}],[11,"def_file","","",5,{"inputs":[{"name":"mrubytype"},{"name":"str"}],"output":null}],[11,"def_class","","",5,{"inputs":[{"name":"mrubytype"},{"name":"str"}],"output":null}],[11,"def_method","","",5,{"inputs":[{"name":"mrubytype"},{"name":"str"},{"name":"f"}],"output":null}],[11,"def_class_method","","",5,{"inputs":[{"name":"mrubytype"},{"name":"str"},{"name":"f"}],"output":null}],[11,"nil","","",5,{"inputs":[{"name":"mrubytype"}],"output":{"name":"value"}}],[11,"bool","","",5,{"inputs":[{"name":"mrubytype"},{"name":"bool"}],"output":{"name":"value"}}],[11,"fixnum","","",5,{"inputs":[{"name":"mrubytype"},{"name":"i32"}],"output":{"name":"value"}}],[11,"float","","",5,{"inputs":[{"name":"mrubytype"},{"name":"f64"}],"output":{"name":"value"}}],[11,"string","","",5,{"inputs":[{"name":"mrubytype"},{"name":"str"}],"output":{"name":"value"}}],[11,"obj","","",5,{"inputs":[{"name":"mrubytype"},{"name":"t"}],"output":{"name":"value"}}],[11,"option","","",5,{"inputs":[{"name":"mrubytype"},{"name":"option"}],"output":{"name":"value"}}],[11,"array","","",5,{"inputs":[{"name":"mrubytype"},{"name":"vec"}],"output":{"name":"value"}}]],"paths":[[3,"MRuby"],[4,"MRubyError"],[3,"Value"],[8,"MRubyFile"],[8,"MRubyImpl"],[6,"MRubyType"]]};
initSearch(searchIndex);
