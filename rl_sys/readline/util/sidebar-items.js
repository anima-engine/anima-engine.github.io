initSidebarItems({"fn":[["alphabetic","Return 1 if `c` is an alphabetic character."],["ding","Ring the terminal bell, obeying the setting of `bell-style`."],["display_match_list","A convenience function for displaying a list of strings in columnar format on Readline's output stream. `matches` is the list of strings, in argv format, such as a list of completion matches. `len` is the number of strings in `matches`, and `max` is the length of the longest string in `matches`. This function uses the setting of `print-completions-horizontally` to select how the matches are displayed (see section [1.3.1 Readline Init File Syntax]). When displaying completions, this function sets the number of columns used for display to the value of `completion-display-width`, the value of the environment variable COLUMNS, or the screen width, in that order. [1.3.1 readline init file syntax]: https://goo.gl/Ivqovs"],["extend_line_buffer","Ensure that `rl_line_buffer` has enough space to hold len characters, possibly reallocating it if necessary."],["free","Deallocate the memory pointed to by `ptr`. `ptr` must have been allocated by malloc."],["init","Initialize or re-initialize Readline's internal state. It's not strictly necessary to call this; `readline()` calls it before reading any input. Note that this will only call `initialize` once after first use."],["replace_line","Replace the contents of `rl_line_buffer` with text. The point and mark are preserved, if possible. If `clear_undo` is true, the undo list associated with the current line is cleared."],["restore_state","Restore Readline's internal state to that stored in `state`, which must have been saved by a call to `save_state`. The contents of the `readline_state` structure are documented in 'readline.h'. The caller is responsible for freeing the structure."],["save_state","Save a snapshot of Readline's internal state to `state`. The contents of the `readline_state` structure are documented in 'readline.h'. The caller is responsible for allocating the structure."]]});